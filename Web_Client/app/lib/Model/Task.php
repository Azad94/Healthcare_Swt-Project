<?php
/**
 * Task
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Healthcare App
 *
 * Beschreibung der Rest-Schnitstelle der Healthcare API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Task Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Task implements ArrayAccess
{
    const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'creator' => '\Swagger\Client\Model\User',
        'editor' => '\Swagger\Client\Model\User',
        'description' => 'string',
        'level' => 'int',
        'creation_time' => 'string',
        'accepted_time' => 'string',
        'closed_time' => 'string',
        'state' => 'int',
        'beacon_object' => '\Swagger\Client\Model\BeaconObject',
        'type' => 'string',
        'role' => '\Swagger\Client\Model\Role',
        'name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'creator' => 'creator',
        'editor' => 'editor',
        'description' => 'description',
        'level' => 'level',
        'creation_time' => 'creationTime',
        'accepted_time' => 'acceptedTime',
        'closed_time' => 'closedTime',
        'state' => 'state',
        'beacon_object' => 'beaconObject',
        'type' => 'type',
        'role' => 'role',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'creator' => 'setCreator',
        'editor' => 'setEditor',
        'description' => 'setDescription',
        'level' => 'setLevel',
        'creation_time' => 'setCreationTime',
        'accepted_time' => 'setAcceptedTime',
        'closed_time' => 'setClosedTime',
        'state' => 'setState',
        'beacon_object' => 'setBeaconObject',
        'type' => 'setType',
        'role' => 'setRole',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'creator' => 'getCreator',
        'editor' => 'getEditor',
        'description' => 'getDescription',
        'level' => 'getLevel',
        'creation_time' => 'getCreationTime',
        'accepted_time' => 'getAcceptedTime',
        'closed_time' => 'getClosedTime',
        'state' => 'getState',
        'beacon_object' => 'getBeaconObject',
        'type' => 'getType',
        'role' => 'getRole',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_MAINTAINANCE_TASK = 'maintainanceTask';
    const TYPE_CLEANING_TASK = 'cleaningTask';
    const TYPE_TRANSPORT_TASK = 'transportTask';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MAINTAINANCE_TASK,
            self::TYPE_CLEANING_TASK,
            self::TYPE_TRANSPORT_TASK,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['editor'] = isset($data['editor']) ? $data['editor'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : 'Kein Kommentar';
        $this->container['level'] = isset($data['level']) ? $data['level'] : 1;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['accepted_time'] = isset($data['accepted_time']) ? $data['accepted_time'] : null;
        $this->container['closed_time'] = isset($data['closed_time']) ? $data['closed_time'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['beacon_object'] = isset($data['beacon_object']) ? $data['beacon_object'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;

        // Initialize discriminator property with the model name.
        $discriminator = array_search('type', self::$attributeMap);
        $this->container[$discriminator] = static::$swaggerModelName;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['creator'] === null) {
            $invalid_properties[] = "'creator' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['level'] === null) {
            $invalid_properties[] = "'level' can't be null";
        }
        if ($this->container['creation_time'] === null) {
            $invalid_properties[] = "'creation_time' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["maintainanceTask", "cleaningTask", "transportTask"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of 'maintainanceTask', 'cleaningTask', 'transportTask'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['creator'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['level'] === null) {
            return false;
        }
        if ($this->container['creation_time'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["maintainanceTask", "cleaningTask", "transportTask"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets creator
     * @return \Swagger\Client\Model\User
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     * @param \Swagger\Client\Model\User $creator
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets editor
     * @return \Swagger\Client\Model\User
     */
    public function getEditor()
    {
        return $this->container['editor'];
    }

    /**
     * Sets editor
     * @param \Swagger\Client\Model\User $editor
     * @return $this
     */
    public function setEditor($editor)
    {
        $this->container['editor'] = $editor;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets level
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     * @param int $level
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets creation_time
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     * @param string $creation_time
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets accepted_time
     * @return string
     */
    public function getAcceptedTime()
    {
        return $this->container['accepted_time'];
    }

    /**
     * Sets accepted_time
     * @param string $accepted_time
     * @return $this
     */
    public function setAcceptedTime($accepted_time)
    {
        $this->container['accepted_time'] = $accepted_time;

        return $this;
    }

    /**
     * Gets closed_time
     * @return string
     */
    public function getClosedTime()
    {
        return $this->container['closed_time'];
    }

    /**
     * Sets closed_time
     * @param string $closed_time
     * @return $this
     */
    public function setClosedTime($closed_time)
    {
        $this->container['closed_time'] = $closed_time;

        return $this;
    }

    /**
     * Gets state
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param int $state 1 bedeutet offen 2 in bearbeitung 3 geschlossen
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets beacon_object
     * @return \Swagger\Client\Model\BeaconObject
     */
    public function getBeaconObject()
    {
        return $this->container['beacon_object'];
    }

    /**
     * Sets beacon_object
     * @param \Swagger\Client\Model\BeaconObject $beacon_object
     * @return $this
     */
    public function setBeaconObject($beacon_object)
    {
        $this->container['beacon_object'] = $beacon_object;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('maintainanceTask', 'cleaningTask', 'transportTask');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'maintainanceTask', 'cleaningTask', 'transportTask'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets role
     * @return \Swagger\Client\Model\Role
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     * @param \Swagger\Client\Model\Role $role
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


