<?php
/**
 * Service
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Healthcare App
 *
 * Beschreibung der Rest-Schnitstelle der Healthcare API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Service Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Service implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Service';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'call_objects' => 'string',
        'quantity' => 'int',
        'target_location' => '\Swagger\Client\Model\Location',
        'creator' => '\Swagger\Client\Model\User'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'call_objects' => 'callObjects',
        'quantity' => 'quantity',
        'target_location' => 'targetLocation',
        'creator' => 'creator'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'call_objects' => 'setCallObjects',
        'quantity' => 'setQuantity',
        'target_location' => 'setTargetLocation',
        'creator' => 'setCreator'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'call_objects' => 'getCallObjects',
        'quantity' => 'getQuantity',
        'target_location' => 'getTargetLocation',
        'creator' => 'getCreator'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CALL_OBJECTS_STANDARDBETT = 'Standardbett';
    const CALL_OBJECTS_SENIORENBETT = 'Seniorenbett';
    const CALL_OBJECTS_KINDERBETT = 'Kinderbett';


    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCallObjectsAllowableValues()
    {
        return [
            self::CALL_OBJECTS_STANDARDBETT,
            self::CALL_OBJECTS_SENIORENBETT,
            self::CALL_OBJECTS_KINDERBETT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['call_objects'] = isset($data['call_objects']) ? $data['call_objects'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['target_location'] = isset($data['target_location']) ? $data['target_location'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["Standardbett", "Seniorenbett", "Kinderbett"];
        if (!in_array($this->container['call_objects'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'call_objects', must be one of 'Standardbett', 'Seniorenbett', 'Kinderbett'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["Standardbett", "Seniorenbett", "Kinderbett"];
        if (!in_array($this->container['call_objects'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets call_objects
     * @return string
     */
    public function getCallObjects()
    {
        return $this->container['call_objects'];
    }

    /**
     * Sets call_objects
     * @param string $call_objects
     * @return $this
     */
    public function setCallObjects($call_objects)
    {
        $allowed_values = array('Standardbett', 'Seniorenbett', 'Kinderbett');
        if (!is_null($call_objects) && (!in_array($call_objects, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'call_objects', must be one of 'Standardbett', 'Seniorenbett', 'Kinderbett'");
        }
        $this->container['call_objects'] = $call_objects;

        return $this;
    }

    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param int $quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets target_location
     * @return \Swagger\Client\Model\Location
     */
    public function getTargetLocation()
    {
        return $this->container['target_location'];
    }

    /**
     * Sets target_location
     * @param \Swagger\Client\Model\Location $target_location
     * @return $this
     */
    public function setTargetLocation($target_location)
    {
        $this->container['target_location'] = $target_location;

        return $this;
    }

    /**
     * Gets creator
     * @return \Swagger\Client\Model\User
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     * @param \Swagger\Client\Model\User $creator
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


