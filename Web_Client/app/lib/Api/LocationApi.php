<?php
/**
 * LocationApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Healthcare App
 *
 * Beschreibung der Rest-Schnitstelle der Healthcare API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * LocationApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LocationApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return LocationApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation locationsCleaningtasksGet
     *
     * Liefert alle CleaningTask zu einer örtlichen beschreibung
     *
     * @param int $floor  (optional)
     * @param int $building  (optional)
     * @param int $room  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CleaningTask[]
     */
    public function locationsCleaningtasksGet($floor = null, $building = null, $room = null)
    {
        list($response) = $this->locationsCleaningtasksGetWithHttpInfo($floor, $building, $room);
        return $response;
    }

    /**
     * Operation locationsCleaningtasksGetWithHttpInfo
     *
     * Liefert alle CleaningTask zu einer örtlichen beschreibung
     *
     * @param int $floor  (optional)
     * @param int $building  (optional)
     * @param int $room  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CleaningTask[], HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsCleaningtasksGetWithHttpInfo($floor = null, $building = null, $room = null)
    {
        // parse inputs
        $resourcePath = "/locations/cleaningtasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($floor !== null) {
            $queryParams['floor'] = $this->apiClient->getSerializer()->toQueryValue($floor);
        }
        // query params
        if ($building !== null) {
            $queryParams['building'] = $this->apiClient->getSerializer()->toQueryValue($building);
        }
        // query params
        if ($room !== null) {
            $queryParams['room'] = $this->apiClient->getSerializer()->toQueryValue($room);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CleaningTask[]',
                '/locations/cleaningtasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CleaningTask[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CleaningTask[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation locationsGet
     *
     * Alle Lokationen
     *
     * @param int $floor Liefert alle locations mit diesem floor (optional)
     * @param int $building Liefert alle location mit diesem Building (optional)
     * @param int $room Alle Location mit diesem Raum (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Location[]
     */
    public function locationsGet($floor = null, $building = null, $room = null)
    {
        list($response) = $this->locationsGetWithHttpInfo($floor, $building, $room);
        return $response;
    }

    /**
     * Operation locationsGetWithHttpInfo
     *
     * Alle Lokationen
     *
     * @param int $floor Liefert alle locations mit diesem floor (optional)
     * @param int $building Liefert alle location mit diesem Building (optional)
     * @param int $room Alle Location mit diesem Raum (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Location[], HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsGetWithHttpInfo($floor = null, $building = null, $room = null)
    {
        // parse inputs
        $resourcePath = "/locations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($floor !== null) {
            $queryParams['floor'] = $this->apiClient->getSerializer()->toQueryValue($floor);
        }
        // query params
        if ($building !== null) {
            $queryParams['building'] = $this->apiClient->getSerializer()->toQueryValue($building);
        }
        // query params
        if ($room !== null) {
            $queryParams['room'] = $this->apiClient->getSerializer()->toQueryValue($room);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Location[]',
                '/locations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Location[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Location[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation locationsLocationIdDelete
     *
     * löschen
     *
     * @param int $location_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function locationsLocationIdDelete($location_id)
    {
        list($response) = $this->locationsLocationIdDeleteWithHttpInfo($location_id);
        return $response;
    }

    /**
     * Operation locationsLocationIdDeleteWithHttpInfo
     *
     * löschen
     *
     * @param int $location_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsLocationIdDeleteWithHttpInfo($location_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling locationsLocationIdDelete');
        }
        // parse inputs
        $resourcePath = "/locations/{locationId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "locationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/locations/{locationId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation locationsLocationIdGet
     *
     * Erhalte eine Lokation
     *
     * @param int $location_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Location
     */
    public function locationsLocationIdGet($location_id)
    {
        list($response) = $this->locationsLocationIdGetWithHttpInfo($location_id);
        return $response;
    }

    /**
     * Operation locationsLocationIdGetWithHttpInfo
     *
     * Erhalte eine Lokation
     *
     * @param int $location_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Location, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsLocationIdGetWithHttpInfo($location_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling locationsLocationIdGet');
        }
        // parse inputs
        $resourcePath = "/locations/{locationId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "locationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Location',
                '/locations/{locationId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Location', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Location', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation locationsLocationIdPut
     *
     * Eine Lokation bearbeiten
     *
     * @param int $location_id  (required)
     * @param \Swagger\Client\Model\Location $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function locationsLocationIdPut($location_id, $body)
    {
        list($response) = $this->locationsLocationIdPutWithHttpInfo($location_id, $body);
        return $response;
    }

    /**
     * Operation locationsLocationIdPutWithHttpInfo
     *
     * Eine Lokation bearbeiten
     *
     * @param int $location_id  (required)
     * @param \Swagger\Client\Model\Location $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsLocationIdPutWithHttpInfo($location_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling locationsLocationIdPut');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling locationsLocationIdPut');
        }
        // parse inputs
        $resourcePath = "/locations/{locationId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "locationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/locations/{locationId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation locationsPost
     *
     * Erstelle eine neue Location
     *
     * @param \Swagger\Client\Model\Location $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Location
     */
    public function locationsPost($body)
    {
        list($response) = $this->locationsPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation locationsPostWithHttpInfo
     *
     * Erstelle eine neue Location
     *
     * @param \Swagger\Client\Model\Location $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Location, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsPostWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling locationsPost');
        }
        // parse inputs
        $resourcePath = "/locations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Location',
                '/locations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Location', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Location', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation locationsTransporttasksGet
     *
     * Liefert alle TransportTask zu einer örtlichen beschreibung
     *
     * @param int $floor  (optional)
     * @param int $building  (optional)
     * @param int $room  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TransportTask[]
     */
    public function locationsTransporttasksGet($floor = null, $building = null, $room = null)
    {
        list($response) = $this->locationsTransporttasksGetWithHttpInfo($floor, $building, $room);
        return $response;
    }

    /**
     * Operation locationsTransporttasksGetWithHttpInfo
     *
     * Liefert alle TransportTask zu einer örtlichen beschreibung
     *
     * @param int $floor  (optional)
     * @param int $building  (optional)
     * @param int $room  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TransportTask[], HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsTransporttasksGetWithHttpInfo($floor = null, $building = null, $room = null)
    {
        // parse inputs
        $resourcePath = "/locations/transporttasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($floor !== null) {
            $queryParams['floor'] = $this->apiClient->getSerializer()->toQueryValue($floor);
        }
        // query params
        if ($building !== null) {
            $queryParams['building'] = $this->apiClient->getSerializer()->toQueryValue($building);
        }
        // query params
        if ($room !== null) {
            $queryParams['room'] = $this->apiClient->getSerializer()->toQueryValue($room);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TransportTask[]',
                '/locations/transporttasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TransportTask[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TransportTask[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
