<?php
/**
 * CleaningTaskApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Healthcare App
 *
 * Beschreibung der Rest-Schnitstelle der Healthcare API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CleaningTaskApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CleaningTaskApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CleaningTaskApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation beaconObjectsBeaconObjectIdCleaningtasksGet
     *
     * Erhalte alle cleaningtasks zu diesem beaconObject
     *
     * @param int $beacon_object_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CleaningTask[]
     */
    public function beaconObjectsBeaconObjectIdCleaningtasksGet($beacon_object_id)
    {
        list($response) = $this->beaconObjectsBeaconObjectIdCleaningtasksGetWithHttpInfo($beacon_object_id);
        return $response;
    }

    /**
     * Operation beaconObjectsBeaconObjectIdCleaningtasksGetWithHttpInfo
     *
     * Erhalte alle cleaningtasks zu diesem beaconObject
     *
     * @param int $beacon_object_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CleaningTask[], HTTP status code, HTTP response headers (array of strings)
     */
    public function beaconObjectsBeaconObjectIdCleaningtasksGetWithHttpInfo($beacon_object_id)
    {
        // verify the required parameter 'beacon_object_id' is set
        if ($beacon_object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $beacon_object_id when calling beaconObjectsBeaconObjectIdCleaningtasksGet');
        }
        // parse inputs
        $resourcePath = "/beaconObjects/{beaconObjectId}/cleaningtasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($beacon_object_id !== null) {
            $resourcePath = str_replace(
                "{" . "beaconObjectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($beacon_object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CleaningTask[]',
                '/beaconObjects/{beaconObjectId}/cleaningtasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CleaningTask[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CleaningTask[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cleaningtasksAppPost
     *
     * Erhalte die ersten 20 offenen tasks
     *
     * @param \Swagger\Client\Model\UserName6 $user_name  (required)
     * @param int $limit Wie viele Tasks sollen geliefert werden (optional, default to 20)
     * @param string $before Vor welchem Datum (optional, default to now)
     * @param string $since Seit Wann (optional, default to 1970-01-01)
     * @param bool $open  (optional, default to true)
     * @param bool $closed  (optional, default to true)
     * @param bool $processing  (optional, default to true)
     * @param bool $own Nur eigene tasks anzeigen? (optional, default to false)
     * @param int $building  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CleaningTask[]
     */
    public function cleaningtasksAppPost($user_name, $limit = null, $before = null, $since = null, $open = null, $closed = null, $processing = null, $own = null, $building = null)
    {
        list($response) = $this->cleaningtasksAppPostWithHttpInfo($user_name, $limit, $before, $since, $open, $closed, $processing, $own, $building);
        return $response;
    }

    /**
     * Operation cleaningtasksAppPostWithHttpInfo
     *
     * Erhalte die ersten 20 offenen tasks
     *
     * @param \Swagger\Client\Model\UserName6 $user_name  (required)
     * @param int $limit Wie viele Tasks sollen geliefert werden (optional, default to 20)
     * @param string $before Vor welchem Datum (optional, default to now)
     * @param string $since Seit Wann (optional, default to 1970-01-01)
     * @param bool $open  (optional, default to true)
     * @param bool $closed  (optional, default to true)
     * @param bool $processing  (optional, default to true)
     * @param bool $own Nur eigene tasks anzeigen? (optional, default to false)
     * @param int $building  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CleaningTask[], HTTP status code, HTTP response headers (array of strings)
     */
    public function cleaningtasksAppPostWithHttpInfo($user_name, $limit = null, $before = null, $since = null, $open = null, $closed = null, $processing = null, $own = null, $building = null)
    {
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_name when calling cleaningtasksAppPost');
        }
        // parse inputs
        $resourcePath = "/cleaningtasksApp";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($before !== null) {
            $queryParams['before'] = $this->apiClient->getSerializer()->toQueryValue($before);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($open !== null) {
            $queryParams['open'] = $this->apiClient->getSerializer()->toQueryValue($open);
        }
        // query params
        if ($closed !== null) {
            $queryParams['closed'] = $this->apiClient->getSerializer()->toQueryValue($closed);
        }
        // query params
        if ($processing !== null) {
            $queryParams['processing'] = $this->apiClient->getSerializer()->toQueryValue($processing);
        }
        // query params
        if ($own !== null) {
            $queryParams['own'] = $this->apiClient->getSerializer()->toQueryValue($own);
        }
        // query params
        if ($building !== null) {
            $queryParams['building'] = $this->apiClient->getSerializer()->toQueryValue($building);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($user_name)) {
            $_tempBody = $user_name;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CleaningTask[]',
                '/cleaningtasksApp'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CleaningTask[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CleaningTask[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorQuery', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cleaningtasksAppSizePost
     *
     * Anzahl der Tasks
     *
     * @param bool $new_tasks Nur die anzahl an neuen Tasks haben seit der letzten abfrage (required)
     * @param \Swagger\Client\Model\UserName8 $user_name  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return int
     */
    public function cleaningtasksAppSizePost($new_tasks, $user_name)
    {
        list($response) = $this->cleaningtasksAppSizePostWithHttpInfo($new_tasks, $user_name);
        return $response;
    }

    /**
     * Operation cleaningtasksAppSizePostWithHttpInfo
     *
     * Anzahl der Tasks
     *
     * @param bool $new_tasks Nur die anzahl an neuen Tasks haben seit der letzten abfrage (required)
     * @param \Swagger\Client\Model\UserName8 $user_name  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function cleaningtasksAppSizePostWithHttpInfo($new_tasks, $user_name)
    {
        // verify the required parameter 'new_tasks' is set
        if ($new_tasks === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_tasks when calling cleaningtasksAppSizePost');
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_name when calling cleaningtasksAppSizePost');
        }
        // parse inputs
        $resourcePath = "/cleaningtasksApp/size";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($new_tasks !== null) {
            $queryParams['newTasks'] = $this->apiClient->getSerializer()->toQueryValue($new_tasks);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($user_name)) {
            $_tempBody = $user_name;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/cleaningtasksApp/size'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cleaningtasksGet
     *
     * Erhalte die ersten 20 offenen tasks
     *
     * @param \Swagger\Client\Model\UserName7 $user_name  (required)
     * @param int $limit Wie viele Tasks sollen geliefert werden (optional, default to 20)
     * @param string $before Vor welchem Datum (optional, default to now)
     * @param string $since Seit Wann (optional, default to 1970-01-01)
     * @param bool $open  (optional, default to true)
     * @param bool $closed  (optional, default to true)
     * @param bool $processing  (optional, default to true)
     * @param bool $own Nur eigene tasks anzeigen? (optional, default to false)
     * @param int $building  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CleaningTask[]
     */
    public function cleaningtasksGet($user_name, $limit = null, $before = null, $since = null, $open = null, $closed = null, $processing = null, $own = null, $building = null)
    {
        list($response) = $this->cleaningtasksGetWithHttpInfo($user_name, $limit, $before, $since, $open, $closed, $processing, $own, $building);
        return $response;
    }

    /**
     * Operation cleaningtasksGetWithHttpInfo
     *
     * Erhalte die ersten 20 offenen tasks
     *
     * @param \Swagger\Client\Model\UserName7 $user_name  (required)
     * @param int $limit Wie viele Tasks sollen geliefert werden (optional, default to 20)
     * @param string $before Vor welchem Datum (optional, default to now)
     * @param string $since Seit Wann (optional, default to 1970-01-01)
     * @param bool $open  (optional, default to true)
     * @param bool $closed  (optional, default to true)
     * @param bool $processing  (optional, default to true)
     * @param bool $own Nur eigene tasks anzeigen? (optional, default to false)
     * @param int $building  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CleaningTask[], HTTP status code, HTTP response headers (array of strings)
     */
    public function cleaningtasksGetWithHttpInfo($user_name, $limit = null, $before = null, $since = null, $open = null, $closed = null, $processing = null, $own = null, $building = null)
    {
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_name when calling cleaningtasksGet');
        }
        // parse inputs
        $resourcePath = "/cleaningtasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($before !== null) {
            $queryParams['before'] = $this->apiClient->getSerializer()->toQueryValue($before);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($open !== null) {
            $queryParams['open'] = $this->apiClient->getSerializer()->toQueryValue($open);
        }
        // query params
        if ($closed !== null) {
            $queryParams['closed'] = $this->apiClient->getSerializer()->toQueryValue($closed);
        }
        // query params
        if ($processing !== null) {
            $queryParams['processing'] = $this->apiClient->getSerializer()->toQueryValue($processing);
        }
        // query params
        if ($own !== null) {
            $queryParams['own'] = $this->apiClient->getSerializer()->toQueryValue($own);
        }
        // query params
        if ($building !== null) {
            $queryParams['building'] = $this->apiClient->getSerializer()->toQueryValue($building);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($user_name)) {
            $_tempBody = $user_name;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CleaningTask[]',
                '/cleaningtasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CleaningTask[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CleaningTask[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorQuery', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cleaningtasksPost
     *
     * Erstelle einen neuen Task
     *
     * @param \Swagger\Client\Model\CleaningTask $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CleaningTask
     */
    public function cleaningtasksPost($body)
    {
        list($response) = $this->cleaningtasksPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation cleaningtasksPostWithHttpInfo
     *
     * Erstelle einen neuen Task
     *
     * @param \Swagger\Client\Model\CleaningTask $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CleaningTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function cleaningtasksPostWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling cleaningtasksPost');
        }
        // parse inputs
        $resourcePath = "/cleaningtasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CleaningTask',
                '/cleaningtasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CleaningTask', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CleaningTask', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cleaningtasksPut
     *
     * Eine reihe CleaningTask bearbeiten
     *
     * @param \Swagger\Client\Model\CleaningTask[] $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function cleaningtasksPut($body)
    {
        list($response) = $this->cleaningtasksPutWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation cleaningtasksPutWithHttpInfo
     *
     * Eine reihe CleaningTask bearbeiten
     *
     * @param \Swagger\Client\Model\CleaningTask[] $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cleaningtasksPutWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling cleaningtasksPut');
        }
        // parse inputs
        $resourcePath = "/cleaningtasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cleaningtasks'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cleaningtasksSizeGet
     *
     * Anzahl der Tasks
     *
     * @param bool $new_tasks Nur die anzahl an neuen Tasks haben seit der letzten abfrage (required)
     * @param \Swagger\Client\Model\UserName9 $user_name  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return int
     */
    public function cleaningtasksSizeGet($new_tasks, $user_name)
    {
        list($response) = $this->cleaningtasksSizeGetWithHttpInfo($new_tasks, $user_name);
        return $response;
    }

    /**
     * Operation cleaningtasksSizeGetWithHttpInfo
     *
     * Anzahl der Tasks
     *
     * @param bool $new_tasks Nur die anzahl an neuen Tasks haben seit der letzten abfrage (required)
     * @param \Swagger\Client\Model\UserName9 $user_name  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function cleaningtasksSizeGetWithHttpInfo($new_tasks, $user_name)
    {
        // verify the required parameter 'new_tasks' is set
        if ($new_tasks === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_tasks when calling cleaningtasksSizeGet');
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_name when calling cleaningtasksSizeGet');
        }
        // parse inputs
        $resourcePath = "/cleaningtasks/size";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($new_tasks !== null) {
            $queryParams['newTasks'] = $this->apiClient->getSerializer()->toQueryValue($new_tasks);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($user_name)) {
            $_tempBody = $user_name;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/cleaningtasks/size'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cleaningtasksTaskidDelete
     *
     * löschen
     *
     * @param int $taskid  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function cleaningtasksTaskidDelete($taskid)
    {
        list($response) = $this->cleaningtasksTaskidDeleteWithHttpInfo($taskid);
        return $response;
    }

    /**
     * Operation cleaningtasksTaskidDeleteWithHttpInfo
     *
     * löschen
     *
     * @param int $taskid  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cleaningtasksTaskidDeleteWithHttpInfo($taskid)
    {
        // verify the required parameter 'taskid' is set
        if ($taskid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $taskid when calling cleaningtasksTaskidDelete');
        }
        // parse inputs
        $resourcePath = "/cleaningtasks/{taskid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($taskid !== null) {
            $resourcePath = str_replace(
                "{" . "taskid" . "}",
                $this->apiClient->getSerializer()->toPathValue($taskid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cleaningtasks/{taskid}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cleaningtasksTaskidGet
     *
     * Erhalte einen einzelnen Task
     *
     * @param int $taskid  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CleaningTask
     */
    public function cleaningtasksTaskidGet($taskid)
    {
        list($response) = $this->cleaningtasksTaskidGetWithHttpInfo($taskid);
        return $response;
    }

    /**
     * Operation cleaningtasksTaskidGetWithHttpInfo
     *
     * Erhalte einen einzelnen Task
     *
     * @param int $taskid  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CleaningTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function cleaningtasksTaskidGetWithHttpInfo($taskid)
    {
        // verify the required parameter 'taskid' is set
        if ($taskid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $taskid when calling cleaningtasksTaskidGet');
        }
        // parse inputs
        $resourcePath = "/cleaningtasks/{taskid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($taskid !== null) {
            $resourcePath = str_replace(
                "{" . "taskid" . "}",
                $this->apiClient->getSerializer()->toPathValue($taskid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CleaningTask',
                '/cleaningtasks/{taskid}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CleaningTask', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CleaningTask', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cleaningtasksTaskidPut
     *
     * Update einen Task
     *
     * @param int $taskid  (required)
     * @param \Swagger\Client\Model\CleaningTask $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function cleaningtasksTaskidPut($taskid, $body)
    {
        list($response) = $this->cleaningtasksTaskidPutWithHttpInfo($taskid, $body);
        return $response;
    }

    /**
     * Operation cleaningtasksTaskidPutWithHttpInfo
     *
     * Update einen Task
     *
     * @param int $taskid  (required)
     * @param \Swagger\Client\Model\CleaningTask $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cleaningtasksTaskidPutWithHttpInfo($taskid, $body)
    {
        // verify the required parameter 'taskid' is set
        if ($taskid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $taskid when calling cleaningtasksTaskidPut');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling cleaningtasksTaskidPut');
        }
        // parse inputs
        $resourcePath = "/cleaningtasks/{taskid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($taskid !== null) {
            $resourcePath = str_replace(
                "{" . "taskid" . "}",
                $this->apiClient->getSerializer()->toPathValue($taskid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cleaningtasks/{taskid}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation locationsCleaningtasksGet
     *
     * Liefert alle CleaningTask zu einer örtlichen beschreibung
     *
     * @param int $floor  (optional)
     * @param int $building  (optional)
     * @param int $room  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CleaningTask[]
     */
    public function locationsCleaningtasksGet($floor = null, $building = null, $room = null)
    {
        list($response) = $this->locationsCleaningtasksGetWithHttpInfo($floor, $building, $room);
        return $response;
    }

    /**
     * Operation locationsCleaningtasksGetWithHttpInfo
     *
     * Liefert alle CleaningTask zu einer örtlichen beschreibung
     *
     * @param int $floor  (optional)
     * @param int $building  (optional)
     * @param int $room  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CleaningTask[], HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsCleaningtasksGetWithHttpInfo($floor = null, $building = null, $room = null)
    {
        // parse inputs
        $resourcePath = "/locations/cleaningtasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($floor !== null) {
            $queryParams['floor'] = $this->apiClient->getSerializer()->toQueryValue($floor);
        }
        // query params
        if ($building !== null) {
            $queryParams['building'] = $this->apiClient->getSerializer()->toQueryValue($building);
        }
        // query params
        if ($room !== null) {
            $queryParams['room'] = $this->apiClient->getSerializer()->toQueryValue($room);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CleaningTask[]',
                '/locations/cleaningtasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CleaningTask[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CleaningTask[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
