<?php
/**
 * BeaconApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Healthcare App
 *
 * Beschreibung der Rest-Schnitstelle der Healthcare API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * BeaconApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BeaconApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return BeaconApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation beaconsBeaconIdDelete
     *
     * löschen
     *
     * @param string $beacon_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function beaconsBeaconIdDelete($beacon_id)
    {
        list($response) = $this->beaconsBeaconIdDeleteWithHttpInfo($beacon_id);
        return $response;
    }

    /**
     * Operation beaconsBeaconIdDeleteWithHttpInfo
     *
     * löschen
     *
     * @param string $beacon_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function beaconsBeaconIdDeleteWithHttpInfo($beacon_id)
    {
        // verify the required parameter 'beacon_id' is set
        if ($beacon_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $beacon_id when calling beaconsBeaconIdDelete');
        }
        // parse inputs
        $resourcePath = "/beacons/{beaconId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($beacon_id !== null) {
            $resourcePath = str_replace(
                "{" . "beaconId" . "}",
                $this->apiClient->getSerializer()->toPathValue($beacon_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/beacons/{beaconId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation beaconsBeaconIdGet
     *
     * Einen bestimmten Beacon erhalten
     *
     * @param string $beacon_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Beacon
     */
    public function beaconsBeaconIdGet($beacon_id)
    {
        list($response) = $this->beaconsBeaconIdGetWithHttpInfo($beacon_id);
        return $response;
    }

    /**
     * Operation beaconsBeaconIdGetWithHttpInfo
     *
     * Einen bestimmten Beacon erhalten
     *
     * @param string $beacon_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Beacon, HTTP status code, HTTP response headers (array of strings)
     */
    public function beaconsBeaconIdGetWithHttpInfo($beacon_id)
    {
        // verify the required parameter 'beacon_id' is set
        if ($beacon_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $beacon_id when calling beaconsBeaconIdGet');
        }
        // parse inputs
        $resourcePath = "/beacons/{beaconId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($beacon_id !== null) {
            $resourcePath = str_replace(
                "{" . "beaconId" . "}",
                $this->apiClient->getSerializer()->toPathValue($beacon_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Beacon',
                '/beacons/{beaconId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Beacon', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Beacon', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation beaconsBeaconIdPut
     *
     * Einen Beacon bearbeiten
     *
     * @param string $beacon_id  (required)
     * @param \Swagger\Client\Model\Beacon $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function beaconsBeaconIdPut($beacon_id, $body)
    {
        list($response) = $this->beaconsBeaconIdPutWithHttpInfo($beacon_id, $body);
        return $response;
    }

    /**
     * Operation beaconsBeaconIdPutWithHttpInfo
     *
     * Einen Beacon bearbeiten
     *
     * @param string $beacon_id  (required)
     * @param \Swagger\Client\Model\Beacon $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function beaconsBeaconIdPutWithHttpInfo($beacon_id, $body)
    {
        // verify the required parameter 'beacon_id' is set
        if ($beacon_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $beacon_id when calling beaconsBeaconIdPut');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling beaconsBeaconIdPut');
        }
        // parse inputs
        $resourcePath = "/beacons/{beaconId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($beacon_id !== null) {
            $resourcePath = str_replace(
                "{" . "beaconId" . "}",
                $this->apiClient->getSerializer()->toPathValue($beacon_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/beacons/{beaconId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation beaconsGet
     *
     * Erhalte alle Beacons
     *
     * @param bool $no_beacon_object Liefert alle beacons die an keinem BeaconObject befestigt sind (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Beacon[]
     */
    public function beaconsGet($no_beacon_object = null)
    {
        list($response) = $this->beaconsGetWithHttpInfo($no_beacon_object);
        return $response;
    }

    /**
     * Operation beaconsGetWithHttpInfo
     *
     * Erhalte alle Beacons
     *
     * @param bool $no_beacon_object Liefert alle beacons die an keinem BeaconObject befestigt sind (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Beacon[], HTTP status code, HTTP response headers (array of strings)
     */
    public function beaconsGetWithHttpInfo($no_beacon_object = null)
    {
        // parse inputs
        $resourcePath = "/beacons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($no_beacon_object !== null) {
            $queryParams['noBeaconObject'] = $this->apiClient->getSerializer()->toQueryValue($no_beacon_object);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Beacon[]',
                '/beacons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Beacon[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Beacon[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation beaconsPost
     *
     * Erstelle neuen Beacon als rückgabe gibt es den fertigen beacon mit uuid
     *
     * @param \Swagger\Client\Model\Body3 $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Beacon
     */
    public function beaconsPost($body)
    {
        list($response) = $this->beaconsPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation beaconsPostWithHttpInfo
     *
     * Erstelle neuen Beacon als rückgabe gibt es den fertigen beacon mit uuid
     *
     * @param \Swagger\Client\Model\Body3 $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Beacon, HTTP status code, HTTP response headers (array of strings)
     */
    public function beaconsPostWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling beaconsPost');
        }
        // parse inputs
        $resourcePath = "/beacons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Beacon',
                '/beacons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Beacon', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Beacon', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
