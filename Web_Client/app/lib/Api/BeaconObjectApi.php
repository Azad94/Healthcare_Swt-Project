<?php
/**
 * BeaconObjectApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Healthcare App
 *
 * Beschreibung der Rest-Schnitstelle der Healthcare API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * BeaconObjectApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BeaconObjectApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return BeaconObjectApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation beaconObjectsBeaconObjectIdCleaningtasksGet
     *
     * Erhalte alle cleaningtasks zu diesem beaconObject
     *
     * @param int $beacon_object_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CleaningTask[]
     */
    public function beaconObjectsBeaconObjectIdCleaningtasksGet($beacon_object_id)
    {
        list($response) = $this->beaconObjectsBeaconObjectIdCleaningtasksGetWithHttpInfo($beacon_object_id);
        return $response;
    }

    /**
     * Operation beaconObjectsBeaconObjectIdCleaningtasksGetWithHttpInfo
     *
     * Erhalte alle cleaningtasks zu diesem beaconObject
     *
     * @param int $beacon_object_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CleaningTask[], HTTP status code, HTTP response headers (array of strings)
     */
    public function beaconObjectsBeaconObjectIdCleaningtasksGetWithHttpInfo($beacon_object_id)
    {
        // verify the required parameter 'beacon_object_id' is set
        if ($beacon_object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $beacon_object_id when calling beaconObjectsBeaconObjectIdCleaningtasksGet');
        }
        // parse inputs
        $resourcePath = "/beaconObjects/{beaconObjectId}/cleaningtasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($beacon_object_id !== null) {
            $resourcePath = str_replace(
                "{" . "beaconObjectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($beacon_object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CleaningTask[]',
                '/beaconObjects/{beaconObjectId}/cleaningtasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CleaningTask[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CleaningTask[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation beaconObjectsBeaconObjectIdDelete
     *
     * löschen
     *
     * @param int $beacon_object_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function beaconObjectsBeaconObjectIdDelete($beacon_object_id)
    {
        list($response) = $this->beaconObjectsBeaconObjectIdDeleteWithHttpInfo($beacon_object_id);
        return $response;
    }

    /**
     * Operation beaconObjectsBeaconObjectIdDeleteWithHttpInfo
     *
     * löschen
     *
     * @param int $beacon_object_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function beaconObjectsBeaconObjectIdDeleteWithHttpInfo($beacon_object_id)
    {
        // verify the required parameter 'beacon_object_id' is set
        if ($beacon_object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $beacon_object_id when calling beaconObjectsBeaconObjectIdDelete');
        }
        // parse inputs
        $resourcePath = "/beaconObjects/{beaconObjectId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($beacon_object_id !== null) {
            $resourcePath = str_replace(
                "{" . "beaconObjectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($beacon_object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/beaconObjects/{beaconObjectId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation beaconObjectsBeaconObjectIdGet
     *
     * Einzelnes Beacon Object
     *
     * @param int $beacon_object_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\BeaconObject
     */
    public function beaconObjectsBeaconObjectIdGet($beacon_object_id)
    {
        list($response) = $this->beaconObjectsBeaconObjectIdGetWithHttpInfo($beacon_object_id);
        return $response;
    }

    /**
     * Operation beaconObjectsBeaconObjectIdGetWithHttpInfo
     *
     * Einzelnes Beacon Object
     *
     * @param int $beacon_object_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\BeaconObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function beaconObjectsBeaconObjectIdGetWithHttpInfo($beacon_object_id)
    {
        // verify the required parameter 'beacon_object_id' is set
        if ($beacon_object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $beacon_object_id when calling beaconObjectsBeaconObjectIdGet');
        }
        // parse inputs
        $resourcePath = "/beaconObjects/{beaconObjectId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($beacon_object_id !== null) {
            $resourcePath = str_replace(
                "{" . "beaconObjectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($beacon_object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BeaconObject',
                '/beaconObjects/{beaconObjectId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BeaconObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeaconObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation beaconObjectsBeaconObjectIdPut
     *
     * Bearbeiten
     *
     * @param int $beacon_object_id  (required)
     * @param \Swagger\Client\Model\BeaconObject $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function beaconObjectsBeaconObjectIdPut($beacon_object_id, $body)
    {
        list($response) = $this->beaconObjectsBeaconObjectIdPutWithHttpInfo($beacon_object_id, $body);
        return $response;
    }

    /**
     * Operation beaconObjectsBeaconObjectIdPutWithHttpInfo
     *
     * Bearbeiten
     *
     * @param int $beacon_object_id  (required)
     * @param \Swagger\Client\Model\BeaconObject $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function beaconObjectsBeaconObjectIdPutWithHttpInfo($beacon_object_id, $body)
    {
        // verify the required parameter 'beacon_object_id' is set
        if ($beacon_object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $beacon_object_id when calling beaconObjectsBeaconObjectIdPut');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling beaconObjectsBeaconObjectIdPut');
        }
        // parse inputs
        $resourcePath = "/beaconObjects/{beaconObjectId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($beacon_object_id !== null) {
            $resourcePath = str_replace(
                "{" . "beaconObjectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($beacon_object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/beaconObjects/{beaconObjectId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation beaconObjectsBeaconObjectIdTransporttasksGet
     *
     * Erhalte alle Transporttasks die zu diesem beaconObject gehören
     *
     * @param int $beacon_object_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TransportTask[]
     */
    public function beaconObjectsBeaconObjectIdTransporttasksGet($beacon_object_id)
    {
        list($response) = $this->beaconObjectsBeaconObjectIdTransporttasksGetWithHttpInfo($beacon_object_id);
        return $response;
    }

    /**
     * Operation beaconObjectsBeaconObjectIdTransporttasksGetWithHttpInfo
     *
     * Erhalte alle Transporttasks die zu diesem beaconObject gehören
     *
     * @param int $beacon_object_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TransportTask[], HTTP status code, HTTP response headers (array of strings)
     */
    public function beaconObjectsBeaconObjectIdTransporttasksGetWithHttpInfo($beacon_object_id)
    {
        // verify the required parameter 'beacon_object_id' is set
        if ($beacon_object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $beacon_object_id when calling beaconObjectsBeaconObjectIdTransporttasksGet');
        }
        // parse inputs
        $resourcePath = "/beaconObjects/{beaconObjectId}/transporttasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($beacon_object_id !== null) {
            $resourcePath = str_replace(
                "{" . "beaconObjectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($beacon_object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TransportTask[]',
                '/beaconObjects/{beaconObjectId}/transporttasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TransportTask[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TransportTask[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation beaconObjectsGet
     *
     * Alle Beaconobjekte
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\BeaconObject[]
     */
    public function beaconObjectsGet()
    {
        list($response) = $this->beaconObjectsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation beaconObjectsGetWithHttpInfo
     *
     * Alle Beaconobjekte
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\BeaconObject[], HTTP status code, HTTP response headers (array of strings)
     */
    public function beaconObjectsGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/beaconObjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BeaconObject[]',
                '/beaconObjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BeaconObject[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeaconObject[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation beaconObjectsPost
     *
     * Erstellen
     *
     * @param \Swagger\Client\Model\BeaconObject $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\BeaconObject
     */
    public function beaconObjectsPost($body)
    {
        list($response) = $this->beaconObjectsPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation beaconObjectsPostWithHttpInfo
     *
     * Erstellen
     *
     * @param \Swagger\Client\Model\BeaconObject $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\BeaconObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function beaconObjectsPostWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling beaconObjectsPost');
        }
        // parse inputs
        $resourcePath = "/beaconObjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BeaconObject',
                '/beaconObjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BeaconObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeaconObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
