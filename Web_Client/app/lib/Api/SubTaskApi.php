<?php
/**
 * SubTaskApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Healthcare App
 *
 * Beschreibung der Rest-Schnitstelle der Healthcare API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * SubTaskApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubTaskApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SubTaskApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskscheckboxGet
     *
     * Erhalte alle subtasks zu einem MaintainanceTask
     *
     * @param int $maintainancetask_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SubTaskCheckbox[]
     */
    public function maintainancetasksMaintainancetaskIdSubtaskscheckboxGet($maintainancetask_id)
    {
        list($response) = $this->maintainancetasksMaintainancetaskIdSubtaskscheckboxGetWithHttpInfo($maintainancetask_id);
        return $response;
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskscheckboxGetWithHttpInfo
     *
     * Erhalte alle subtasks zu einem MaintainanceTask
     *
     * @param int $maintainancetask_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SubTaskCheckbox[], HTTP status code, HTTP response headers (array of strings)
     */
    public function maintainancetasksMaintainancetaskIdSubtaskscheckboxGetWithHttpInfo($maintainancetask_id)
    {
        // verify the required parameter 'maintainancetask_id' is set
        if ($maintainancetask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maintainancetask_id when calling maintainancetasksMaintainancetaskIdSubtaskscheckboxGet');
        }
        // parse inputs
        $resourcePath = "/maintainancetasks/{maintainancetaskId}/subtaskscheckbox";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($maintainancetask_id !== null) {
            $resourcePath = str_replace(
                "{" . "maintainancetaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($maintainancetask_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubTaskCheckbox[]',
                '/maintainancetasks/{maintainancetaskId}/subtaskscheckbox'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubTaskCheckbox[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubTaskCheckbox[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskscheckboxPost
     *
     * Erstelle einen neuen SubTask
     *
     * @param int $maintainancetask_id  (required)
     * @param \Swagger\Client\Model\SubTaskCheckbox $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SubTaskCheckbox
     */
    public function maintainancetasksMaintainancetaskIdSubtaskscheckboxPost($maintainancetask_id, $body)
    {
        list($response) = $this->maintainancetasksMaintainancetaskIdSubtaskscheckboxPostWithHttpInfo($maintainancetask_id, $body);
        return $response;
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskscheckboxPostWithHttpInfo
     *
     * Erstelle einen neuen SubTask
     *
     * @param int $maintainancetask_id  (required)
     * @param \Swagger\Client\Model\SubTaskCheckbox $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SubTaskCheckbox, HTTP status code, HTTP response headers (array of strings)
     */
    public function maintainancetasksMaintainancetaskIdSubtaskscheckboxPostWithHttpInfo($maintainancetask_id, $body)
    {
        // verify the required parameter 'maintainancetask_id' is set
        if ($maintainancetask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maintainancetask_id when calling maintainancetasksMaintainancetaskIdSubtaskscheckboxPost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling maintainancetasksMaintainancetaskIdSubtaskscheckboxPost');
        }
        // parse inputs
        $resourcePath = "/maintainancetasks/{maintainancetaskId}/subtaskscheckbox";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($maintainancetask_id !== null) {
            $resourcePath = str_replace(
                "{" . "maintainancetaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($maintainancetask_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubTaskCheckbox',
                '/maintainancetasks/{maintainancetaskId}/subtaskscheckbox'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubTaskCheckbox', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubTaskCheckbox', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdDelete
     *
     * Lösche einen Subtask
     *
     * @param int $subtask_id  (required)
     * @param int $maintainancetask_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdDelete($subtask_id, $maintainancetask_id)
    {
        list($response) = $this->maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdDeleteWithHttpInfo($subtask_id, $maintainancetask_id);
        return $response;
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdDeleteWithHttpInfo
     *
     * Lösche einen Subtask
     *
     * @param int $subtask_id  (required)
     * @param int $maintainancetask_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdDeleteWithHttpInfo($subtask_id, $maintainancetask_id)
    {
        // verify the required parameter 'subtask_id' is set
        if ($subtask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subtask_id when calling maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdDelete');
        }
        // verify the required parameter 'maintainancetask_id' is set
        if ($maintainancetask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maintainancetask_id when calling maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdDelete');
        }
        // parse inputs
        $resourcePath = "/maintainancetasks/{maintainancetaskId}/subtaskscheckbox/{subtaskId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($subtask_id !== null) {
            $resourcePath = str_replace(
                "{" . "subtaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subtask_id),
                $resourcePath
            );
        }
        // path params
        if ($maintainancetask_id !== null) {
            $resourcePath = str_replace(
                "{" . "maintainancetaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($maintainancetask_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/maintainancetasks/{maintainancetaskId}/subtaskscheckbox/{subtaskId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdPost
     *
     * Subtask bearbeiten
     *
     * @param int $subtask_id  (required)
     * @param int $maintainancetask_id  (required)
     * @param \Swagger\Client\Model\AbstractSubTask $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SubTaskCheckbox
     */
    public function maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdPost($subtask_id, $maintainancetask_id, $body)
    {
        list($response) = $this->maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdPostWithHttpInfo($subtask_id, $maintainancetask_id, $body);
        return $response;
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdPostWithHttpInfo
     *
     * Subtask bearbeiten
     *
     * @param int $subtask_id  (required)
     * @param int $maintainancetask_id  (required)
     * @param \Swagger\Client\Model\AbstractSubTask $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SubTaskCheckbox, HTTP status code, HTTP response headers (array of strings)
     */
    public function maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdPostWithHttpInfo($subtask_id, $maintainancetask_id, $body)
    {
        // verify the required parameter 'subtask_id' is set
        if ($subtask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subtask_id when calling maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdPost');
        }
        // verify the required parameter 'maintainancetask_id' is set
        if ($maintainancetask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maintainancetask_id when calling maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdPost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling maintainancetasksMaintainancetaskIdSubtaskscheckboxSubtaskIdPost');
        }
        // parse inputs
        $resourcePath = "/maintainancetasks/{maintainancetaskId}/subtaskscheckbox/{subtaskId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($subtask_id !== null) {
            $resourcePath = str_replace(
                "{" . "subtaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subtask_id),
                $resourcePath
            );
        }
        // path params
        if ($maintainancetask_id !== null) {
            $resourcePath = str_replace(
                "{" . "maintainancetaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($maintainancetask_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubTaskCheckbox',
                '/maintainancetasks/{maintainancetaskId}/subtaskscheckbox/{subtaskId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubTaskCheckbox', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubTaskCheckbox', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtasksimageGet
     *
     * Erhalte alle subtasks zu einem MaintainanceTask
     *
     * @param int $maintainancetask_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SubTaskImage[]
     */
    public function maintainancetasksMaintainancetaskIdSubtasksimageGet($maintainancetask_id)
    {
        list($response) = $this->maintainancetasksMaintainancetaskIdSubtasksimageGetWithHttpInfo($maintainancetask_id);
        return $response;
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtasksimageGetWithHttpInfo
     *
     * Erhalte alle subtasks zu einem MaintainanceTask
     *
     * @param int $maintainancetask_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SubTaskImage[], HTTP status code, HTTP response headers (array of strings)
     */
    public function maintainancetasksMaintainancetaskIdSubtasksimageGetWithHttpInfo($maintainancetask_id)
    {
        // verify the required parameter 'maintainancetask_id' is set
        if ($maintainancetask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maintainancetask_id when calling maintainancetasksMaintainancetaskIdSubtasksimageGet');
        }
        // parse inputs
        $resourcePath = "/maintainancetasks/{maintainancetaskId}/subtasksimage";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($maintainancetask_id !== null) {
            $resourcePath = str_replace(
                "{" . "maintainancetaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($maintainancetask_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubTaskImage[]',
                '/maintainancetasks/{maintainancetaskId}/subtasksimage'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubTaskImage[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubTaskImage[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtasksimagePost
     *
     * Erstelle einen neuen SubTask
     *
     * @param int $maintainancetask_id  (required)
     * @param \Swagger\Client\Model\SubTaskImage $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SubTaskImage
     */
    public function maintainancetasksMaintainancetaskIdSubtasksimagePost($maintainancetask_id, $body)
    {
        list($response) = $this->maintainancetasksMaintainancetaskIdSubtasksimagePostWithHttpInfo($maintainancetask_id, $body);
        return $response;
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtasksimagePostWithHttpInfo
     *
     * Erstelle einen neuen SubTask
     *
     * @param int $maintainancetask_id  (required)
     * @param \Swagger\Client\Model\SubTaskImage $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SubTaskImage, HTTP status code, HTTP response headers (array of strings)
     */
    public function maintainancetasksMaintainancetaskIdSubtasksimagePostWithHttpInfo($maintainancetask_id, $body)
    {
        // verify the required parameter 'maintainancetask_id' is set
        if ($maintainancetask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maintainancetask_id when calling maintainancetasksMaintainancetaskIdSubtasksimagePost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling maintainancetasksMaintainancetaskIdSubtasksimagePost');
        }
        // parse inputs
        $resourcePath = "/maintainancetasks/{maintainancetaskId}/subtasksimage";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($maintainancetask_id !== null) {
            $resourcePath = str_replace(
                "{" . "maintainancetaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($maintainancetask_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubTaskImage',
                '/maintainancetasks/{maintainancetaskId}/subtasksimage'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubTaskImage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubTaskImage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdDelete
     *
     * Lösche einen Subtask
     *
     * @param int $subtask_id  (required)
     * @param int $maintainancetask_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdDelete($subtask_id, $maintainancetask_id)
    {
        list($response) = $this->maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdDeleteWithHttpInfo($subtask_id, $maintainancetask_id);
        return $response;
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdDeleteWithHttpInfo
     *
     * Lösche einen Subtask
     *
     * @param int $subtask_id  (required)
     * @param int $maintainancetask_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdDeleteWithHttpInfo($subtask_id, $maintainancetask_id)
    {
        // verify the required parameter 'subtask_id' is set
        if ($subtask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subtask_id when calling maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdDelete');
        }
        // verify the required parameter 'maintainancetask_id' is set
        if ($maintainancetask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maintainancetask_id when calling maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdDelete');
        }
        // parse inputs
        $resourcePath = "/maintainancetasks/{maintainancetaskId}/subtasksimage/{subtaskId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($subtask_id !== null) {
            $resourcePath = str_replace(
                "{" . "subtaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subtask_id),
                $resourcePath
            );
        }
        // path params
        if ($maintainancetask_id !== null) {
            $resourcePath = str_replace(
                "{" . "maintainancetaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($maintainancetask_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/maintainancetasks/{maintainancetaskId}/subtasksimage/{subtaskId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdPost
     *
     * Subtask bearbeiten
     *
     * @param int $subtask_id  (required)
     * @param int $maintainancetask_id  (required)
     * @param \Swagger\Client\Model\SubTaskImage $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SubTaskImage
     */
    public function maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdPost($subtask_id, $maintainancetask_id, $body)
    {
        list($response) = $this->maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdPostWithHttpInfo($subtask_id, $maintainancetask_id, $body);
        return $response;
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdPostWithHttpInfo
     *
     * Subtask bearbeiten
     *
     * @param int $subtask_id  (required)
     * @param int $maintainancetask_id  (required)
     * @param \Swagger\Client\Model\SubTaskImage $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SubTaskImage, HTTP status code, HTTP response headers (array of strings)
     */
    public function maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdPostWithHttpInfo($subtask_id, $maintainancetask_id, $body)
    {
        // verify the required parameter 'subtask_id' is set
        if ($subtask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subtask_id when calling maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdPost');
        }
        // verify the required parameter 'maintainancetask_id' is set
        if ($maintainancetask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maintainancetask_id when calling maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdPost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling maintainancetasksMaintainancetaskIdSubtasksimageSubtaskIdPost');
        }
        // parse inputs
        $resourcePath = "/maintainancetasks/{maintainancetaskId}/subtasksimage/{subtaskId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($subtask_id !== null) {
            $resourcePath = str_replace(
                "{" . "subtaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subtask_id),
                $resourcePath
            );
        }
        // path params
        if ($maintainancetask_id !== null) {
            $resourcePath = str_replace(
                "{" . "maintainancetaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($maintainancetask_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubTaskImage',
                '/maintainancetasks/{maintainancetaskId}/subtasksimage/{subtaskId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubTaskImage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubTaskImage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskssliderGet
     *
     * Erhalte alle subtasks zu einem MaintainanceTask
     *
     * @param int $maintainancetask_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SubTaskSlider[]
     */
    public function maintainancetasksMaintainancetaskIdSubtaskssliderGet($maintainancetask_id)
    {
        list($response) = $this->maintainancetasksMaintainancetaskIdSubtaskssliderGetWithHttpInfo($maintainancetask_id);
        return $response;
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskssliderGetWithHttpInfo
     *
     * Erhalte alle subtasks zu einem MaintainanceTask
     *
     * @param int $maintainancetask_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SubTaskSlider[], HTTP status code, HTTP response headers (array of strings)
     */
    public function maintainancetasksMaintainancetaskIdSubtaskssliderGetWithHttpInfo($maintainancetask_id)
    {
        // verify the required parameter 'maintainancetask_id' is set
        if ($maintainancetask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maintainancetask_id when calling maintainancetasksMaintainancetaskIdSubtaskssliderGet');
        }
        // parse inputs
        $resourcePath = "/maintainancetasks/{maintainancetaskId}/subtasksslider";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($maintainancetask_id !== null) {
            $resourcePath = str_replace(
                "{" . "maintainancetaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($maintainancetask_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubTaskSlider[]',
                '/maintainancetasks/{maintainancetaskId}/subtasksslider'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubTaskSlider[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubTaskSlider[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskssliderPost
     *
     * Erstelle einen neuen SubTask
     *
     * @param int $maintainancetask_id  (required)
     * @param \Swagger\Client\Model\SubTaskSlider $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SubTaskSlider
     */
    public function maintainancetasksMaintainancetaskIdSubtaskssliderPost($maintainancetask_id, $body)
    {
        list($response) = $this->maintainancetasksMaintainancetaskIdSubtaskssliderPostWithHttpInfo($maintainancetask_id, $body);
        return $response;
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskssliderPostWithHttpInfo
     *
     * Erstelle einen neuen SubTask
     *
     * @param int $maintainancetask_id  (required)
     * @param \Swagger\Client\Model\SubTaskSlider $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SubTaskSlider, HTTP status code, HTTP response headers (array of strings)
     */
    public function maintainancetasksMaintainancetaskIdSubtaskssliderPostWithHttpInfo($maintainancetask_id, $body)
    {
        // verify the required parameter 'maintainancetask_id' is set
        if ($maintainancetask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maintainancetask_id when calling maintainancetasksMaintainancetaskIdSubtaskssliderPost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling maintainancetasksMaintainancetaskIdSubtaskssliderPost');
        }
        // parse inputs
        $resourcePath = "/maintainancetasks/{maintainancetaskId}/subtasksslider";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($maintainancetask_id !== null) {
            $resourcePath = str_replace(
                "{" . "maintainancetaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($maintainancetask_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubTaskSlider',
                '/maintainancetasks/{maintainancetaskId}/subtasksslider'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubTaskSlider', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubTaskSlider', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdDelete
     *
     * Lösche einen Subtask
     *
     * @param int $subtask_id  (required)
     * @param int $maintainancetask_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdDelete($subtask_id, $maintainancetask_id)
    {
        list($response) = $this->maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdDeleteWithHttpInfo($subtask_id, $maintainancetask_id);
        return $response;
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdDeleteWithHttpInfo
     *
     * Lösche einen Subtask
     *
     * @param int $subtask_id  (required)
     * @param int $maintainancetask_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdDeleteWithHttpInfo($subtask_id, $maintainancetask_id)
    {
        // verify the required parameter 'subtask_id' is set
        if ($subtask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subtask_id when calling maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdDelete');
        }
        // verify the required parameter 'maintainancetask_id' is set
        if ($maintainancetask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maintainancetask_id when calling maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdDelete');
        }
        // parse inputs
        $resourcePath = "/maintainancetasks/{maintainancetaskId}/subtasksslider/{subtaskId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($subtask_id !== null) {
            $resourcePath = str_replace(
                "{" . "subtaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subtask_id),
                $resourcePath
            );
        }
        // path params
        if ($maintainancetask_id !== null) {
            $resourcePath = str_replace(
                "{" . "maintainancetaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($maintainancetask_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/maintainancetasks/{maintainancetaskId}/subtasksslider/{subtaskId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdPost
     *
     * Subtask bearbeiten
     *
     * @param int $subtask_id  (required)
     * @param int $maintainancetask_id  (required)
     * @param \Swagger\Client\Model\SubTaskSlider $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SubTaskSlider
     */
    public function maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdPost($subtask_id, $maintainancetask_id, $body)
    {
        list($response) = $this->maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdPostWithHttpInfo($subtask_id, $maintainancetask_id, $body);
        return $response;
    }

    /**
     * Operation maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdPostWithHttpInfo
     *
     * Subtask bearbeiten
     *
     * @param int $subtask_id  (required)
     * @param int $maintainancetask_id  (required)
     * @param \Swagger\Client\Model\SubTaskSlider $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SubTaskSlider, HTTP status code, HTTP response headers (array of strings)
     */
    public function maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdPostWithHttpInfo($subtask_id, $maintainancetask_id, $body)
    {
        // verify the required parameter 'subtask_id' is set
        if ($subtask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subtask_id when calling maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdPost');
        }
        // verify the required parameter 'maintainancetask_id' is set
        if ($maintainancetask_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maintainancetask_id when calling maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdPost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling maintainancetasksMaintainancetaskIdSubtaskssliderSubtaskIdPost');
        }
        // parse inputs
        $resourcePath = "/maintainancetasks/{maintainancetaskId}/subtasksslider/{subtaskId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($subtask_id !== null) {
            $resourcePath = str_replace(
                "{" . "subtaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subtask_id),
                $resourcePath
            );
        }
        // path params
        if ($maintainancetask_id !== null) {
            $resourcePath = str_replace(
                "{" . "maintainancetaskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($maintainancetask_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubTaskSlider',
                '/maintainancetasks/{maintainancetaskId}/subtasksslider/{subtaskId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubTaskSlider', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubTaskSlider', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
