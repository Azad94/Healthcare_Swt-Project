<?php
/**
 * ServiceApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team & Radoslaw Speier
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Healthcare App
 *
 * Beschreibung der Rest-Schnitstelle der Healthcare API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;
use DateTime;

include '../../autoload.php';
/**
 * ServiceApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServiceApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {   
        
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        $locBody = new \Swagger\Client\Model\Location(); 
        $locBody->setBuilding(5);
        $locBody->setFloor(4);
        $locBody->setRoom(3);
        
        $body2 = new \Swagger\Client\Model\Beacon();
        $body2->setMajor(1);
        $body2->setMinor(0);
        $api_instanceLocation = new Api\LocationApi();
        $api_instanceBeacon = new Api\BeaconApi();
        try {
            list($return,$statusCode,$c) = $api_instanceLocation->locationsPostWithHttpInfo($locBody);
            list($return2,$statusCode2,$c2) = $api_instanceBeacon->beaconsPostWithHttpInfo($body2);  
           
           
            $locationID=$return['id'];
            $GLOBALS['locationID']=$locationID;
            $beaconID=$return2['uuid'];
            
        }
         catch (\Swagger\Client\ApiException $e){
            print $e->getCode();
         }
        
        $body = new \Swagger\Client\Model\BeaconObject();
        $beaObApi_instance = new \Swagger\Client\Api\BeaconObjectApi();
        $locApi_instance = new \Swagger\Client\Api\LocationApi();
        $beaApi_instance = new \Swagger\Client\Api\BeaconApi();
        
        try
        {
            $beacon = $beaApi_instance->beaconsBeaconIdGet($beaconID);
            $location = $locApi_instance->locationsLocationIdGet($locationID);
        }
        catch (Exception $e)
        {  
            echo 'Exception: ', $e->getMessage(), PHP_EOL;
        }
        $body->setLocation($location);
        $body->setBeacon($beacon);
        $body->setName("Bett");
        $body->setBeaconObjectType(\Swagger\Client\Model\BeaconObject::BEACON_OBJECT_TYPE_SENIORENBETT);
        $body->setPictureOfObject(null);
        $body->setState(0);
        
        
        try
        {
            list($result,$statusCode,$c) = $beaObApi_instance->beaconObjectsPostWithHttpInfo($body);
            $this->assertTrue($statusCode==200);
            $GLOBALS['beaconID']=$result['id'];
        } catch (Exception $e) {
            echo 'Exception when calling BeaconObjectApi->beaconObjectsPost: ', $e->getMessage(), PHP_EOL;
        }
        
        /***Role***/
        $roleApiInstance = new \Swagger\Client\Api\RoleApi();
        $roleBody = new \Swagger\Client\Model\Role();
        $roleBody->setName("Schieber");
        $role = $roleApiInstance->rolesPost($roleBody);
        $GLOBALS['roleID']=$role['id'];
        /***USER***/
        $userApiInstance = new \Swagger\Client\Api\UserApi();
        $userBody = new \Swagger\Client\Model\User();
        $userBody->setEmail("lol@lo.de");
        $userBody->setName("test");
        $userBody->setPassword("1234");
        $date = new DateTime();
        $userBody->setLastUpdate($date->format(DateTime::ATOM));
        $userBody->setRole($role);
        try{
            $user = $userApiInstance->usersPost($userBody);
            $GLOBALS['userID']=$user['id'];
        } catch(ApiException $e){
            echo $e->getTraceAsString();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {   $api_instanceBeaconObject = new Api\BeaconObjectApi();
        $api_instanceLocation = new Api\LocationApi();
        $api_instanceRole = new Api\RoleApi();
        $api_instanceUser = new Api\UserApi();
        try {
            $api_instanceBeaconObject->beaconObjectsBeaconObjectIdDelete($GLOBALS['beaconID']);
            $api_instanceLocation->locationsLocationIdDelete($GLOBALS['locationID']);
            $api_instanceUser->usersUserIdDelete($GLOBALS['userID']);
            $api_instanceRole->rolesRoleIdDelete($GLOBALS['roleID']);
        }
        catch (\Swagger\Client\ApiException $e){
            echo $e->getMessage();
        }
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for serviceGet
     *
     * Erhalte einen task und erstelle ihn fÃ¼r eine Service anfrage.
     *
     */
    public function testServiceGet()
    {
        /*** new location ***/
        $locBody = new \Swagger\Client\Model\Location(); 
        $locBody->setBuilding(2);
        $locBody->setFloor(2);
        $locBody->setRoom(3);
        
        $api_instanceLocation = new Api\LocationApi();
        list($returnLocation,$statusCode,$c) = $api_instanceLocation->locationsPostWithHttpInfo($locBody);
        
        
        $userApi_instance = new \Swagger\Client\Api\UserApi();
        $user = $userApi_instance->usersUserIdGet($GLOBALS['userID']);
        
        
        
        
        $body = new \Swagger\Client\Model\Service();
        $body->setCallObjects("Seniorenbett");
        $body->setQuantity(1);
        $body->setCreator($user);
        $body->setTargetLocation($returnLocation);
        $serviceApi_instance = new \Swagger\Client\Api\ServiceApi();
        $task = $serviceApi_instance->serviceGet($body);
        var_dump($task);
        $this->assertTrue(count($task)>0);
    
    }

}
