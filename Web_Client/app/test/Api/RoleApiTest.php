<?php
/**
 * RoleApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team & Radoslaw Speier
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Healthcare App
 *
 * Beschreibung der Rest-Schnitstelle der Healthcare API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;
use DateTime;

include '../../autoload.php';
/**
 * RoleApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RoleApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for rolesPost
     *
     * Erstelle neue Role.
     *
     */
    public function testRolesPost()
    {
        $api_roleInstance = new \Swagger\Client\Api\RoleApi();
        $body = new \Swagger\Client\Model\Role();
        $body->setName("Administrator");
        list($result,$statusCode,$c)=$api_roleInstance->rolesPostWithHttpInfo($body);
        $this->assertTrue($statusCode==200);
        $this->assertTrue($result->getName()=="Administrator");
        return $result->getId();
    }
    
    /**
     * Test case for rolesGet
     *
     * Alle rollen.
     *@depends testRolesPost
     */
    public function testRolesGet($id)
    {
         $api_roleInstance = new \Swagger\Client\Api\RoleApi();
         list($result,$statusCode,$c)=$api_roleInstance->rolesGetWithHttpInfo();
         $this->assertTrue($statusCode==200);
         $this->assertTrue(count($result)>=1);
    }

    
    /**
     * Test case for rolesRoleIdGet
     *
     * Einzelne role.
     *@depends testRolesPost
     */
    public function testRolesRoleIdGet($id)
    {
         $api_roleInstance = new \Swagger\Client\Api\RoleApi();
         list($result,$statusCode,$c)=$api_roleInstance->rolesRoleIdGetWithHttpInfo($id);
         $this->assertTrue($statusCode==200);
         $this->assertTrue($result->getName()=="Administrator");
    }

    /**
     * Test case for rolesRoleIdPut
     *
     * Role bearbeiten.
     *@depends testRolesPost
     */
    public function testRolesRoleIdPut($id)
    {
        $api_roleInstance = new \Swagger\Client\Api\RoleApi();
        $body = new \Swagger\Client\Model\Role();
        $body->setName("Schieber");
        list($result,$statusCode,$c)=$api_roleInstance->rolesRoleIdPutWithHttpInfo($id, $body);
        $this->assertTrue($statusCode==200);
        list($result,$statusCode,$c)=$api_roleInstance->rolesRoleIdGetWithHttpInfo($id, $body);
        $this->assertTrue($result->getName()=="Schieber");
        
    }
    /**
     * Test case for rolesRoleIdDelete
     *
     * lÃ¶schen.
     *@depends testRolesPost
     */
    public function testRolesRoleIdDelete($id)
    {
        $api_roleInstance = new \Swagger\Client\Api\RoleApi();
        list($result,$statusCode,$c)=$api_roleInstance->rolesRoleIdDeleteWithHttpInfo($id);
        $this->assertTrue($statusCode==200);
        try{
            $api_roleInstance->rolesRoleIdGet($id);
        } catch (ApiException $ex) {
            $this->assertTrue($ex->getCode()==404);
        }
    }

    

}
