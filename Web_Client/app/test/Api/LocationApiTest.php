<?php
/**
 * LocationApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team & Radoslaw Speier
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Healthcare App
 *
 * Beschreibung der Rest-Schnitstelle der Healthcare API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;
use Swagger\Client\Api\LocationApi;
use PHPUnit\Framework\TestCase;

include '../../autoload.php';
/**
 * LocationApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LocationApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    $body = new \Swagger\Client\Model\Location(); 
    $body->setBuilding(1);
    $body->setFloor(2);
    $body->setRoom(3);
    
    return $body;
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    
     /**
     * Test case for locationsPost
     *
     * Erstelle eine neue Location.
     *
     */
    public function testLocationsPost()
    {
        $body = $this->setUp();
        $api_instance = new LocationApi();
         try {$return = $api_instance->locationsPost($body);
              
              $this->assertTrue($return['building']==1);
              $this->assertTrue($return['floor']==2);
              $this->assertTrue($return['room']==3);
              return $return['id'];
         }
         catch (\Swagger\Client\ApiException $e){
            print $e->getCode();
         }
    }
    
     /**
     * Test case for locationsLocationIdGet
     *
     * Erhalte eine Lokation.
     *@depends testLocationsPost
     */
    public function testLocationsLocationIdGet($id)
    {
        $api_instance = new LocationApi();
        try{ $result = $api_instance->locationsLocationIdGet($id);
            $this->assertTrue($result['building']==1);
            $this->assertTrue($result['floor']==2);
            $this->assertTrue($result['room']==3);
            
            return $id;
        } catch (\Swagger\Client\ApiException $ex) {
             print $ex->getCode();
        }
        
    }
    
     /**
     * Test case for locationsLocationIdPut
     *
     * Eine Lokation bearbeiten.
     *@depends testLocationsPost
     */
    public function testLocationsLocationIdPut($id)
    {
        $api_instance = new LocationApi();
        $array = array('building'=> 0,'floor'=>0, 'room'=>7);
        $body = new Model\Location($array);
        try{ list($result,$statusCode,$c) = $api_instance->locationsLocationIdPutWithHttpInfo($id,$body);
            $this->AssertTrue($statusCode==200);
            return $id;
        } catch (\Swagger\Client\ApiException $ex) {
             print $ex->getCode();
        }

    }
    
   

    /**
     * Test case for locationsGet
     *
     * Alle Lokationen.
     *@depends testLocationsPost
     */
    public function testLocationsGet()
    {
        $api_instance = new LocationApi();

        try{ list($result,$statusCode,$c) = $api_instance->locationsGetWithHttpInfo();
            $this->AssertTrue($statusCode==200);
            $this->AssertTrue(count($result)>=1);
            list($result2,$statusCode,$c) = $api_instance->locationsGetWithHttpInfo(0, 0, 7);
            $this->AssertTrue($statusCode==200);
            $this->assertTrue(count($result2)>=1);
        } catch (\Swagger\Client\ApiException $ex) {
             print $ex->getCode();
        }

    }

    /**
     * Test case for locationsLocationIdDelete
     *
     * löschen.
     *@depends testLocationsPost
     */
    public function testLocationsLocationIdDelete($id)
    {
         $api_instance = new LocationApi;
        try{ list($result,$statuscode,$c) = $api_instance->locationsLocationIdDeleteWithHttpInfo($id);
            $this->assertTrue($statuscode==200);
            $result = $api_instance->locationsLocationIdGet($id);
            
        } catch (\Swagger\Client\ApiException $ex) {
            $this->assertTrue($ex->getCode()==404);
        }
    }

   

   

    /**
     * Test case for locationsCleaningtasksGet
     *
     * Liefert alle CleaningTask zu einer örtlichen beschreibung.
     *
     */
    public function testLocationsCleaningtasksGet()
    {

    }

    /**
     * Test case for locationsTransporttasksGet
     *
     * Liefert alle TransportTask zu einer örtlichen beschreibung.
     *
     */
    public function testLocationsTransporttasksGet()
    {

    }

}
