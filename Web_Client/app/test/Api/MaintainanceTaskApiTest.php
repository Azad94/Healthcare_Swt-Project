<?php
/**
 * MaintainanceTaskApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team & Radoslaw Speier
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Healthcare App
 *
 * Beschreibung der Rest-Schnitstelle der Healthcare API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;
use \Datetime;

include '../../autoload.php';

/**
 * MaintainanceTaskApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MaintainanceTaskApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
        
        
       
        
        /***Role***/
        $roleApiInstance = new \Swagger\Client\Api\RoleApi();
        $roleBody = new \Swagger\Client\Model\Role();
        $roleBody->setName("Verwalter");
        $role = $roleApiInstance->rolesPost($roleBody);
        /****USER*****/
        $userApiInstance = new \Swagger\Client\Api\UserApi();
        $userBody = new \Swagger\Client\Model\User();
        $userBody->setEmail("lol@lo.de");
        $userBody->setName("test");
        $userBody->setPassword("1234");
        $date = new DateTime();
        $userBody->setLastUpdate($date->format(DateTime::ATOM));
        //$userBody->setLastUpdate(null);
        $userBody->setRole($role);
        try{
            $user = $userApiInstance->usersPost($userBody);
            
        } catch(ApiException $e){
            echo $e->getTraceAsString();
        }
        /**** LOCATION ***/
        $body = new \Swagger\Client\Model\Location(); 
        $body->setBuilding(1);
        $body->setFloor(1);
        $body->setRoom(1);
        /*** Beacon ****/
        $body2 = new \Swagger\Client\Model\Beacon();
        $body2->setMajor(1);
        $body2->setMinor(0);
        $api_instanceLocation = new Api\LocationApi();
        $api_instanceBeacon = new Api\BeaconApi();
        
            list($location,$statusCode,$c) = $api_instanceLocation->locationsPostWithHttpInfo($body);
            list($beacon,$statusCode2,$c2) = $api_instanceBeacon->beaconsPostWithHttpInfo($body2);  
       
        $BObody = new \Swagger\Client\Model\BeaconObject();
        $beaObApi_instance = new \Swagger\Client\Api\BeaconObjectApi();
        
   
        $BObody->setLocation($location);
        $BObody->setBeacon($beacon);
        $BObody->setName("TestBetten");
        $BObody->setBeaconObjectType(\Swagger\Client\Model\BeaconObject::BEACON_OBJECT_TYPE_SENIORENBETT);
        $BObody->setPictureOfObject(null);
        $BObody->setState(1);
        
            list($result,$statusCode,$c) = $beaObApi_instance->beaconObjectsPostWithHttpInfo($BObody);
        
        $GLOBALS['userID']=$user['id'];
        $GLOBALS['locationID']=$location['id'];
        $GLOBALS['beaconObjectID']=$result['id'];
        
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

  

    /**
     * Test case for maintainancetasksPost
     *
     * Erstelle einen neuen Task.
     *
     */
    public function testMaintainancetasksPost()
    {
                    $maintenanceTaskApi_instance = new \Swagger\Client\Api\MaintainanceTaskApi();
                    
                    $subTaskApi_instance = new \Swagger\Client\Api\SubTaskApi();
                    $beaconObjectApi_instance = new \Swagger\Client\Api\BeaconObjectApi();
                    $userApi_instance = new \Swagger\Client\Api\UserApi();
                    
                    $date = new DateTime();
                    // NOCH FREQUENCY
                    $body = new \Swagger\Client\Model\MaintainanceTask();
                    $user = $userApi_instance->usersUserIdGet($GLOBALS['userID']);
                    $body->setCreator($user);
                    $body->setDescription("blbla");
                    $body->setLevel(1);
                    $body->setCreationTime($date);
                    $body->setState(1);
                    $body->setBeaconObject($beaconObjectApi_instance->beaconObjectsBeaconObjectIdGet($GLOBALS['beaconObjectID']));
                    $body->setType(\Swagger\Client\Model\Task::TYPE_MAINTAINANCE_TASK);
                    $body->setRole($user->getRole());
                    $body->setName("ganz toll");
                    $body->setPicture(null);
                    $body->setSubTasks(null);
                    $body->setRepeatTaskInDay(0);
                    try{
                        list($result,$statusCode,$c) = $maintenanceTaskApi_instance->maintainancetasksPostWithHttpInfo($body);
                        $this->AssertTrue($statusCode==200);
                        
                        return $result['id'];
                    
                        
                    } catch (\Swagger\Client\ApiException $e){
                        $this->assertTrue(false);
                        //print_r($e->getResponseBody());
                    }
                    
    }

    

  

    /**
     * Test case for maintainancetasksTaskidGet
     *
     * Erhalte einen einzelnen Task.
     * @depends testMaintainancetasksPost
     */
    public function testMaintainancetasksTaskidGet($id)
    {
        
        
       $maintenanceTaskApi_instance = new \Swagger\Client\Api\MaintainanceTaskApi();
            
       try {
           
            list($result,$statuscode,$c) = $maintenanceTaskApi_instance->maintainancetasksTaskidGetWithHttpInfo($id);
            
                $this->AssertTrue($result['description']=="blbla");
                $this->AssertTrue($result['level']==1);
                //$this->AssertTrue($result['date']==$date);
                $this->AssertTrue($result['state']==1);
                //beaconobject
                $this->AssertTrue($result['type']==\Swagger\Client\Model\Task::TYPE_MAINTAINANCE_TASK);
                $this->AssertTrue($result['role']['name']=="Verwalter");
                $this->AssertTrue($result['name']=="ganz toll");
                //picture
                //subtasks
                $this->assertTrue($result['repeatTasksInDays']==0);
                return $result['id'];
         
            
       } catch (ApiException $ex) {
           $this->asserTrue(false);
       }
       //$this->
    }

    /**
     * Test case for maintainancetasksTaskidPut
     *
     * Update einen Task.
     * @depends testMaintainancetasksPost
     */
    public function testMaintainancetasksTaskidPut($id)
    {
        $maintenanceTaskApi_instance = new \Swagger\Client\Api\MaintainanceTaskApi();
        try {
            list($result,$statuscode,$c) = $maintenanceTaskApi_instance->maintainancetasksTaskidGetWithHttpInfo($id);
            $this->assertTrue($statuscode==200);
            $result->setDescription("new description");
            list($putResult,$statuscode,$c) = $maintenanceTaskApi_instance->maintainancetasksTaskidPutWithHttpInfo($id,$result);
            $this->assertTrue($statuscode==200);
            list($getResult,$statuscode,$c) = $maintenanceTaskApi_instance->maintainancetasksTaskidGetWithHttpInfo($id);
            $this->assertTrue($statuscode==200);
            $this->assertTrue($getResult->getDescription()=="new description");
        } catch (Exception $ex) {
            $this->assertTrue(false);
        }
            
        
    }
    
      /**
     * Test case for beaconObjectsBeaconObjectIdMaintainancetasksGet
     *
     * Alle Maintainancetasks die zu diesem BeaconObjekt gehören.
     *
     */
    public function testBeaconObjectsBeaconObjectIdMaintainancetasksGet()
    {
        $maintenanceTaskApi_instance = new \Swagger\Client\Api\MaintainanceTaskApi();
        $beaconObject_api = new \Swagger\Client\Api\BeaconObjectApi();
        $beacon_object=$beaconObject_api->beaconObjectsBeaconObjectIdGet($GLOBALS['beaconObjectID']);
        
        try{
            list($result,$statuscode,$c)=$maintenanceTaskApi_instance->beaconObjectsBeaconObjectIdMaintainancetasksGetWithHttpInfo($beacon_object['id']);
            $this->assertTrue($statuscode==200);
            $this->assertTrue(count($result)>=1);
            
        } catch (Exception $ex) {

        }
    }

    /**
     * Test case for locationsMaintainancetasksGet
     *
     * Liefert alle MaintainanceTasks zu einer örtlichen beschreibung.
     *@depends testMaintainancetasksPost
     */
    public function testLocationsMaintainancetasksGet($id)
    {
        $maintenanceTaskApi_instance = new \Swagger\Client\Api\MaintainanceTaskApi();
        $location_Api = new \Swagger\Client\Api\LocationApi();
        
        
        try {
            
            $location = $location_Api->locationsLocationIdGet($GLOBALS['locationID']);
            $result = $maintenanceTaskApi_instance->locationsMaintainancetasksGet($location->getFloor(), $location->getBuilding(), $location->getRoom());
            $this->assertTrue($statusCode==200);
            //$this->assertTrue($result['name']=="ganz toll");
           
        } catch (Exception $ex) {
             assertTrue(false);
        }
    }

   

    /**
     * Test case for maintainancetasksGet
     *
     * Erhalte die ersten 20 offenen tasks.
     *
     */
    public function testMaintainancetasksGet()
    {
        $maintenanceTaskApi_instance = new \Swagger\Client\Api\MaintainanceTaskApi();
        $user_api = new \Swagger\Client\Api\UserApi();

        try{
            
            $since = new DateTime("1970-01-01");
            $since = $since->format(DateTime::ATOM);
            $before = new DateTime("now");
            $before = $before->format(DateTime::ATOM);
            $user = $user_api->usersUserIdGet($GLOBALS['userID']);
            list($result,$statuscode,$c)=$maintenanceTaskApi_instance->maintainancetasksGetWithHttpInfo($user);/*,100,$before,$since,1,1,1,0);*/
            $this->assertTrue($statuscode==200);
            foreach($result as $task){
                $this->assertTrue($task->getType()== \Swagger\Client\Model\MaintainanceTask::TYPE_MAINTAINANCE_TASK);
            }
            
        } catch (ApiException $ex) {
            $this->assertTrue(false);
        }
        
    }
    
      /**
     * Test case for maintainancetasksTaskidDelete
     *
     * löschen.
     *@depends testMaintainancetasksPost
     */
    public function testMaintainancetasksTaskidDelete($id)
    { 
        //no longer supported by the API
        $this->assertTrue(true);
    }

}
