<?php
/**
 * UserApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team & Radoslaw Speier
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Healthcare App
 *
 * Beschreibung der Rest-Schnitstelle der Healthcare API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;
use DateTime;
use PHPUnit\Framework\TestCase;

include '../../autoload.php';
/**
 * UserApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
        $api_roleInstance = new \Swagger\Client\Api\RoleApi();
        $body = new \Swagger\Client\Model\Role();
        $body->setName("Administrator");
        list($result,$statusCode,$c)=$api_roleInstance->rolesPostWithHttpInfo($body);
        $GLOBALS['role']=$result;
    
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
        $api_roleInstance = new \Swagger\Client\Api\RoleApi();
        $api_roleInstance->rolesRoleIdDelete($GLOBALS['role']->getId());
    }

     /**
     * Test case for usersPost
     *
     * Erstelle einen neuen user.
     *
     */
    public function testUsersPost()
    {
        $api_instanceUser = new \Swagger\Client\Api\UserApi();
        $body = new \Swagger\Client\Model\User();
        $body->setName("TestUser");
        $body->setEmail("a@b.de");
        $date = new DateTime();
        $body->setLastUpdate($date->format(DateTime::ATOM));
        $body->setPassword("1234");
        $body->setRole($GLOBALS['role']);
        list($result,$statusCode,$c)=$api_instanceUser->usersPostWithHttpInfo($body);
        $this->assertTrue($statusCode==200);
        $this->assertTrue($result->getName()=="TestUser");
        $this->assertTrue($result->getEmail()=="a@b.de");
        $this->assertTrue($result->getPassword()=="1234");
        $this->assertTrue($result->getRole()->getName()=="Administrator");
        
        return $result->getId();
        
    }
    
    
    /**
     * Test case for usersGet
     *
     * Liste aller User.
     *@depends testUsersPost
     */
    public function testUsersGet()
    {
       $api_instanceUser = new \Swagger\Client\Api\UserApi();
       list($result,$statusCode,$c)=$api_instanceUser->usersGetWithHttpInfo();
       $this->assertTrue($statusCode===200);
       $this->assertTrue(count($result)>=1);
       
       
       
    }

   /**
     * Test case for usersUserIdGet
     *
     * Erhalte informationen über einen User.
     *@depends testUsersPost
     */
    public function testUsersUserIdGet($id)
    {
       $api_instanceUser = new \Swagger\Client\Api\UserApi();
       list($result,$statusCode,$c)=$api_instanceUser->usersUserIdGetWithHttpInfo($id);
       $this->assertTrue($statusCode===200);
       $this->assertTrue($result->getName()=="TestUser");
       $this->assertTrue($result->getEmail()=="a@b.de");
       $this->assertTrue($result->getPassword()=="1234");
       $this->assertTrue($result->getRole()->getName()=="Administrator");
       
    }

    /**
     * Test case for usersUserIdPut
     *
     * Einen User bearbeiten.
     *@depends testUsersPost
     */
    public function testUsersUserIdPut($id)
    {
        $api_instanceUser = new \Swagger\Client\Api\UserApi();
        $body = new \Swagger\Client\Model\User();
        $body->setName("admin");
        $body->setEmail("abc@b.de");
        $date = new DateTime();
        $body->setLastUpdate($date->format(DateTime::ATOM));
        $body->setPassword("admin");
        $body->setRole($GLOBALS['role']);
        list($result,$statusCode,$c)=$api_instanceUser->usersUserIdPutWithHttpInfo($id,$body);
        $this->assertTrue($statusCode==200);
        list($result,$statusCode,$c)=$api_instanceUser->usersUserIdGetWithHttpInfo($id);
        $this->assertTrue($result->getName()=="admin");
        $this->assertTrue($result->getEmail()=="abc@b.de");
        $this->assertTrue($result->getPassword()=="admin");
        $this->assertTrue($result->getRole()->getName()=="Administrator");
        
    }

    /**
     * Test case for usersUserIdDelete
     *
     * löschen.
     *@depends testUsersPost
     */
    public function testUsersUserIdDelete($id)
    {
        $api_instanceUser = new \Swagger\Client\Api\UserApi();
        try{
            list($result,$statusCode,$c)=$api_instanceUser->usersUserIdDeleteWithHttpInfo($id);
           $this->assertTrue($statusCode==200);
           $api_instanceUser->usersUserIdGet($id);
        } catch(\Swagger\Client\ApiException $ex){
            $this->assertTrue($ex->getCode()==404);
        }
     
     
    }

    

}
